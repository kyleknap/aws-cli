#!/usr/bin/env python
"""Script to build a Docker image of the AWS CLI"""
import argparse
import os
import sys
import shutil
from distutils.dir_util import copy_tree

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils import run, tmp_dir, cd, BadRCError


ROOT = os.path.dirname(os.path.dirname(os.path.dirname(
    os.path.abspath(__file__))))
DOCKER_DIR = os.path.join(ROOT, 'docker')
DIST_DIR = os.path.join(ROOT, 'dist')
DEFAULT_EXE_ZIP = os.path.join(DIST_DIR, 'awscli-exe.zip')
DEFAULT_DOCKER_OUTPUT = os.path.join(DIST_DIR, 'aws-cli-docker.tar')
IMAGE_NAME = 'amazon/aws-cli'
EXPECTED_DOCKERFILE_EXE_NAME = 'awscli-exe-linux-x86_64.zip'


def make_docker(exe, output, image_name):
    _ensure_docker_is_available()
    with tmp_dir() as build_context:
        _make_build_context(build_context, exe)
        _docker_build(build_context, image_name)
    _docker_save(image_name, output)


def _ensure_docker_is_available():
    try:
        run(['docker', '--version'])
    except (OSError, BadRCError) as e:
        raise RuntimeError(
            'Docker must be installed to run this script. Received '
            'following error from docker --version: %s' % e
        )


def _make_build_context(build_context_dir, exe):
    _copy_docker_dir_to_build_context(build_context_dir)
    _copy_exe_to_build_context(build_context_dir, exe)


def _copy_docker_dir_to_build_context(build_context_dir):
    copy_tree(DOCKER_DIR, build_context_dir)


def _copy_exe_to_build_context(build_context_dir, exe):
    build_context_exe_path = os.path.join(
        build_context_dir, EXPECTED_DOCKERFILE_EXE_NAME)
    shutil.copy(exe, build_context_exe_path)


def _docker_build(build_context_dir, image_name):
    with cd(build_context_dir):
        print(run(['docker', 'build', '.', '-t', image_name]))


def _docker_save(image_name, output):
    parent_dir = os.path.dirname(output)
    if not os.path.exists(parent_dir):
        os.makedirs(parent_dir)
    run(['docker', 'save', '--output', output, image_name])
    print('Saved image at: %s' % output)


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        '--exe',
        default=DEFAULT_EXE_ZIP,
        help=(
            'The name of the exe zip to build into the Docker image. By '
            'default the exe located at: %s' % DEFAULT_EXE_ZIP
        )
    )
    parser.add_argument(
        '--output',
        default=DEFAULT_DOCKER_OUTPUT,
        help=(
            'The name of the file to save the Docker image. By default, '
            'this will be saved at: %s' % DEFAULT_DOCKER_OUTPUT
        )
    )
    parser.add_argument(
        '--image-name',
        default=IMAGE_NAME,
        help=(
            'The name to give the image. By default, the image name will be '
            'named: %s' % IMAGE_NAME
        ),
    )
    parsed_args = parser.parse_args()
    make_docker(parsed_args.exe, parsed_args.output, parsed_args.image_name)


if __name__ == "__main__":
    main()
